import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import React from "react";
import { ipfsImage, ipfsJsonData } from "../hooks/ipfs";
import ConnectWallet from "../components/ConnectWallet";
import { Web3Modalfunction } from "../hooks/web3";
import Contract from "../ethereum/artifacts/contracts/MyNFT.sol/MyNFT.json";
import toast, { Toaster } from "react-hot-toast";
import Confetti from "react-confetti";

export default function Home() {
  const { web3, error } = Web3Modalfunction();

  const [name, setName] = React.useState("");
  const [file, setFile] = React.useState(null);
  const [txhash, setTxhash] = React.useState("");
  const [errMsg, setErrMsg] = React.useState("");
  const [isMinted, setIsMinted] = React.useState(false);

  // function for minting (takes ipfs url as argument)

  const mintNft = async (tokenURI) => {
    if (error) {
      setErrMsg(error);
      return;
    }
    const contractAddress = "0xb6832D07658404dF4bDC5629b485Db9a8B57C830"; // deployed contract address
    if (web3.eth) {
      const nftContract = new web3.eth.Contract(Contract.abi, contractAddress);
      const accounts = await web3.eth.getAccounts();
      const loadingToast = toast.loading("Minting NFT");

      try {
        const hash = await nftContract.methods
          .mintNFT(accounts[0], tokenURI)
          .send({
            from: accounts[0],
          });
        toast.success("NFT minted", {
          icon: "ðŸŽ‰",
          id: loadingToast,
        });
        setIsMinted(true);
        disableConfetti();
        setName("");
        setFile(null);
        return hash.transactionHash;
      } catch (e) {
        console.log(e, "lawde lag gaye");
        return null;
      }
    } else {
      setErrMsg("Wallet connection failed");
      alert("connect wallet");
    }
  };

  const onSubmitHandler = async () => {
    // data uploaded to ipfs
    if (name === "" || file === null) {
      return;
    }
    const loadingToast = toast.loading("Uploading data to IPFS");
    const imageUrl = await ipfsImage(file);
    const obj = {
      name,
      image: imageUrl,
    };
    const jsonDataUrl = await ipfsJsonData(obj);
    toast.success("Data uploaded successfully!", {
      id: loadingToast,
    });
    console.log(jsonDataUrl);
    // minting begins
    const hash = await mintNft(jsonDataUrl);
    console.log(hash);
    setTxhash(hash);
  };
  // for disabling Confetti (5 sec timeout)
  const disableConfetti = () => {
    setTimeout(() => {
      setIsMinted(false);
    }, 5000);
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Mint your NFT</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Toaster />
      {isMinted && <Confetti width={window.width} height={window.height} />}
      <h1 className={styles.heading}>MINT YOUR NFT</h1>
      <h3 className={styles.subHeading}>using erc721 token</h3>
      <p className={styles.subHeading2}>Use ropsten testnetwork</p>
      <form className={styles.subContainer}>
        <input
          id="input"
          type="text"
          placeholder="name"
          className={styles.input}
          onChange={(e) => setName(e.target.value)}
          required
        />
        <input
          id="input"
          type="file"
          className={styles.input}
          onChange={(e) => setFile(e.target.files[0])}
          required
        />
        <button onClick={onSubmitHandler}>Submit</button>
      </form>
      <ConnectWallet />
      {txhash}
      {errMsg}
      <a className={styles.footer} href="https://ropsten.etherscan.io/">
        Click here to see your NFT
      </a>
    </div>
  );
}
